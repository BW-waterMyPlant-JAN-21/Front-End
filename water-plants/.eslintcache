[{"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\index.js":"1","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\App.js":"2","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Signup.js":"3","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Home.js":"4","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Login.js":"5","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Dashboard.js":"6","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Navigation.js":"7","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\PlantDetails.js":"8","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Plant.js":"9","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\context\\globalContext.js":"10","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\updateForm.js":"11","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\plant-Form.js":"12","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\utils\\privateRoute.js":"13"},{"size":359,"mtime":1612756339283,"results":"14","hashOfConfig":"15"},{"size":3822,"mtime":1612756339239,"results":"16","hashOfConfig":"15"},{"size":3838,"mtime":1612756339259,"results":"17","hashOfConfig":"15"},{"size":981,"mtime":1612312225693,"results":"18","hashOfConfig":"15"},{"size":1748,"mtime":1612756339248,"results":"19","hashOfConfig":"15"},{"size":1696,"mtime":1612756339240,"results":"20","hashOfConfig":"15"},{"size":1648,"mtime":1612756339252,"results":"21","hashOfConfig":"15"},{"size":1575,"mtime":1612756339257,"results":"22","hashOfConfig":"15"},{"size":5182,"mtime":1612312225694,"results":"23","hashOfConfig":"15"},{"size":643,"mtime":1612756339275,"results":"24","hashOfConfig":"15"},{"size":2913,"mtime":1612756339267,"results":"25","hashOfConfig":"15"},{"size":2928,"mtime":1612756339262,"results":"26","hashOfConfig":"15"},{"size":468,"mtime":1612756339288,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t9a726",{"filePath":"30","messages":"31","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"33"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\index.js",[],"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\App.js",["62","63","64","65","66","67","68","69"],"import React, {useState, useEffect} from 'react';\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport './App.css';\r\nimport Home from './Components/Home.js';\r\nimport Login from './Components/Login.js';\r\nimport Signup from './Components/Signup.js';\r\nimport Navigation from './Components/Navigation.js';\r\nimport Dashboard from './Components/Dashboard.js';\r\nimport PlantDetails from './Components/PlantDetails.js';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const initialFormValues = {\r\n    username : ' ',\r\n    phoneNumber: ' ',\r\n    password: ' ',\r\n    confirmPassword: ' ',\r\n  }\r\n\r\n  const [userPlants, setUserPlants] = useState([]); //Includes all of User's Plants\r\n  const [form, setForm] = useState(initialFormValues);\r\n  const [listResetPlants, setListResetPlants] = useState([]);\r\n\r\n  const [authenticatedUser, setAuthentication] = useState(false);\r\n\r\n  const addThirstyPlants = (thirstyPlant) => {\r\n    setListResetPlants([...listResetPlants, thirstyPlant]);\r\n  }\r\n\r\n  const submitFunction = () => {\r\n    setForm(initialFormValues); //Reset the form values\r\n  }\r\n\r\n  const createPlantCards = (plantDetails) => {\r\n    axios\r\n      .post(\"/users\", plantDetails)\r\n      .then((res) => {\r\n        console.log(res.data)\r\n        setUserPlants([...userPlants, res.data])\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const triggerDelete = ((index) => {\r\n    let copyUserPlants = [...userPlants];\r\n    copyUserPlants.splice(index, 1);\r\n    setUserPlants(copyUserPlants)\r\n  })\r\n\r\n  const adjustResetList = (() => {\r\n    let copyResetArray = [...listResetPlants];\r\n    let deletedPlantIndex = 0;\r\n    copyResetArray.map((plant) => {\r\n      if(!userPlants.includes(plant)) {\r\n        deletedPlantIndex = copyResetArray.indexOf(plant);\r\n        copyResetArray.splice(deletedPlantIndex, 1);\r\n      }\r\n      setListResetPlants(copyResetArray);\r\n      return listResetPlants;\r\n    })\r\n  })\r\n\r\n  const updateValue = (inputName, inputValue) => {\r\n    setForm({...form, [inputName] : inputValue});\r\n  }\r\n\r\n  useEffect(() => {\r\n    const data = localStorage.getItem('user-plant-list');\r\n\r\n    if(data) {\r\n      setUserPlants(JSON.parse(data));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('user-plant-list', JSON.stringify(userPlants));\r\n  });\r\n\r\n  //This will help pass down the set plants data function to the child components\r\n  const updatePlantsData = (updatedArray) => {\r\n    setUserPlants(updatedArray);\r\n  }\r\n\r\n  /*Fake User Authentication Data*/\r\n  const admin = {\r\n    userName : 'jayaram',\r\n    password: 'jayaram123',\r\n  }\r\n\r\n  const authenticateUserFunction = (status) => {\r\n    setAuthentication(status);\r\n  }\r\n\r\n  /*Fake User Authentication Data*/\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Water-My-Plants</h1>\r\n      <Navigation authenticatedUser = {authenticatedUser} authenticateUserFunction = {authenticateUserFunction}/>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n            <Home></Home>\r\n        </Route>\r\n        <Route path=\"/signup\">\r\n            <Signup\r\n              form = {form}\r\n              updateValue = {updateValue}\r\n              submitFunction = {submitFunction}\r\n            />\r\n        </Route>\r\n        <Route path=\"/login\">\r\n            <Login admin = {admin} authenticateUserFunction = {authenticateUserFunction} authenticatedUser = {authenticatedUser}/>\r\n        </Route>\r\n        <Route path=\"/dashboard\">\r\n            <Dashboard \r\n            createPlantFunction = {createPlantCards} \r\n            deleteFunction = {triggerDelete}\r\n            plantData = {userPlants}\r\n            addThirstyPlantFunction = {addThirstyPlants}\r\n            listResetPlants = {listResetPlants}\r\n            adjustResetListFunction = {adjustResetList}\r\n            updatePlantsFunction = {updatePlantsData}\r\n            />\r\n        </Route>\r\n        <Route path=\"/plants/:plant\">\r\n            <PlantDetails plantData = {userPlants} updatePlantsFunction = {updatePlantsData}/>\r\n          </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["70","71"],"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Signup.js",["72","73","74"],"import axios from 'axios';\r\nimport React, {useState, useContext, useEffect} from 'react';\r\nimport * as yup from 'yup';\r\nimport {GlobalContext} from '../context/globalContext'\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nconst lowercaseRegex = /(?=.*[a-z])/;\r\nconst uppercaseRegex = /(?=.*[A-Z])/;\r\nconst numericRegex = /(?=.*[0-9])/;\r\n\r\nconst schema = yup.object().shape({\r\n    username: yup.string().required('User Name is Required!').min(2, \"Names must be atleast 2 Characters Long\"),\r\n    password: yup.string().required('Password is Required!')\r\n    .matches(lowercaseRegex, 'one lowercase character required')\r\n    .matches(uppercaseRegex, 'one uppercase character required')\r\n    .matches(numericRegex, 'one number required')\r\n    .min(8, 'Minimum 8 characters required!'),\r\n    phoneNumber: yup.number()\r\n    .required('Phone Number is Required'),\r\n    // confirmPassword: yup.string()\r\n    // .required('Please Confirm Password before submitting the form')\r\n})\r\n\r\nconst Signup = (props) => {\r\n    let {push} = useHistory()\r\n\r\n    let {disabled, setDisabled} = useContext(GlobalContext)\r\n\r\n    const[form,updateValue] = useState({\r\n        username: '',\r\n        phoneNumber: '',\r\n        password: '',\r\n        \r\n    })\r\n   \r\n\r\n    const [errors, setErrors] = useState({\r\n        username: ' ',\r\n        phoneNumber: ' ',\r\n        password: ' ',\r\n        // confirmPassword: ' '\r\n    })\r\n\r\n\r\n    const setFormErrors = (name, value) => {\r\n        yup.reach(schema, name).validate(value)\r\n        .then(() => setErrors({...errors, [name]: ''}))\r\n        .catch((err) => {\r\n            setErrors({...errors, [name]: err.errors[0]})\r\n        })\r\n    }\r\n\r\n    const changeFunction = (e) => {\r\n        // const{name, value} = evt.target;\r\n        // console.log(name, value);\r\n        // updateValue(name, value);\r\n        // setFormErrors(name, value);\r\n        updateValue({...form,[e.target.name]:e.target.value})\r\n        console.log('form data in change',form)\r\n    }\r\n\r\n    useEffect(() => {\r\n        schema.isValid(form).then(valid =>setDisabled(!valid))\r\n    }, [form])\r\n\r\n    const submitFunction =(e)=>{\r\n        e.preventDefault();\r\n\r\n        console.log('form',form)\r\n        axios\r\n        .post('https://waterplant-101.herokuapp.com/auth/register',form)\r\n        .then((res)=>{\r\n            push('/login');\r\n        console.log(res.data)})\r\n        .catch(err=>console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-signup\">\r\n            <form onSubmit={submitFunction}>\r\n                <label> User Name:\r\n                    <input onChange={changeFunction} value={form.username} name=\"username\" type=\"text\" placeholder=\"Enter User Name\"/>\r\n                </label>\r\n                <p style={{color: 'red'}}>{errors.username}</p>\r\n                <label> Cell Number:\r\n                    <input onChange={changeFunction} value={form.phoneNumber} name=\"phoneNumber\" type=\"string\" placeholder=\"Enter Phone Number\"/>\r\n                </label>\r\n                <p style={{color: 'red'}}>{errors.phoneNumber}</p>\r\n                <label> Password:\r\n                    <input onChange={changeFunction} value={form.password} name=\"password\" type=\"text\" placeholder=\"Enter Password\"/>\r\n                </label>\r\n                <p style={{color: 'red'}}>{errors.password}</p>\r\n                {/* <label> Confirm Password:\r\n                    <input onChange={changeFunction} value={form.confirmPassword} name=\"confirmPassword\" type=\"text\" placeholder=\"Enter Pasword Again to Confirm\"/>\r\n                </label> */}\r\n                {/* <p style={{color: 'red'}}>{errors.confirmPassword}</p> */}\r\n                <button>sign up </button>\r\n                {/* disabled = {disabled}>{disabled ? 'Fill The Form' : 'Submit Form'} */}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Home.js",[],"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Login.js",["75"],"import React, {useState,useContext} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {GlobalContext} from '../context/globalContext'\r\nimport jwt_decode from 'jwt-decode'\r\nimport axios from 'axios'\r\n\r\nconst Login = () => {\r\n    let {push} = useHistory()\r\n\r\n    const [user, setUser] = useState({\r\n        username: \"\",\r\n        password: \"\",\r\n    })\r\n    const {setLoggedIn,setActiveUser,activeUser} = useContext(GlobalContext)\r\n  \r\n\r\n    const history = useHistory();\r\n\r\n    const formChangeFunction = (evt) => {\r\n        const {name, value} = evt.target;\r\n        console.log(name, value);\r\n        setUser({...user, [evt.target.name] : evt.target.value});\r\n    }\r\n   \r\n\r\n    const loginAttempt = (e) => {\r\n        e.preventDefault();\r\n        \r\n     axios\r\n     .post('https://waterplant-101.herokuapp.com/auth/login',user)\r\n     .then(res=>{localStorage.setItem('token',res.data.token);\r\n    //  let decoded = jwt_decode(res.data.token);\r\n     setActiveUser(jwt_decode(res.data.token).userId)\r\n     console.log('acive user in login ',activeUser)\r\n     push('/dashboard')\r\n     console.log('token',res.data.token)\r\n     setLoggedIn(true)\r\n     })\r\n     .catch(err=>console.log(err))\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-login\">\r\n            <form onSubmit = {loginAttempt}>\r\n                <label>User Name: \r\n                    <input onChange = {formChangeFunction} name =\"username\" value={user.username}/>\r\n                </label>\r\n                <label> Password:\r\n                    <input onChange = {formChangeFunction} name = \"password\" value={user.password}/>\r\n                </label>\r\n                <button>Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Dashboard.js",["76"],"import React, {useState} from \"react\";\r\nimport Plant from \"./Plant.js\";\r\nimport nature from \"../Assets/nature.jpg\";\r\n\r\nconst Dashboard = (props) => {\r\n\r\n  const {createPlantFunction, deleteFunction, plantData, addThirstyPlantFunction, listResetPlants, adjustResetListFunction, updatePlantsFunction} = props;\r\n\r\n  const startPlantDetails = {\r\n    nickname: \" \",\r\n    species: \" \",\r\n    plantImage: nature,\r\n    days: \"00\",\r\n    today: \"\",\r\n  };\r\n\r\n  const [plantDetails, setPlantDetails] = useState(startPlantDetails);\r\n\r\n  const enterPlantDetails = (evt) => {\r\n    const {name, value} = evt.target;\r\n    console.log(name, value);\r\n    setPlantDetails({...plantDetails, [name] : value});\r\n  }\r\n\r\n  const createPlantCards = (evt) => {\r\n    evt.preventDefault();\r\n    createPlantFunction(plantDetails);\r\n    setPlantDetails(startPlantDetails);\r\n    adjustResetListFunction();\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboardForm\">\r\n      <h2>Add Your Plants!</h2>\r\n      {<div className=\"wateringNotification\">\r\n          <h5>Important Notifications!</h5>\r\n          {listResetPlants.map((eachPlant) => {\r\n            return <p>{`${eachPlant.nickname} plant needs water`}</p>\r\n          })}\r\n        </div>\r\n      }\r\n      <form onSubmit={createPlantCards} className='plantForm'>\r\n        <label>\r\n          nickname:\r\n          <input\r\n            onChange={enterPlantDetails}\r\n            type='text'\r\n            value={plantDetails.nickname}\r\n            name='nickname'\r\n            placeholder='Enter nickname'\r\n          />\r\n        </label>\r\n        <label>\r\n          species:\r\n          <input\r\n            onChange={enterPlantDetails}\r\n            type='text'\r\n            value={plantDetails.species}\r\n            name='species'\r\n            placeholder='Enter species'\r\n          />\r\n        </label>\r\n        <div className=\"wateringSchedule\">\r\n          <p>H2O Frequency Timer:</p>\r\n          <label>\r\n            Watering Frequency (Days)\r\n            <select onChange = {enterPlantDetails} value = {plantDetails.days} name=\"days\">\r\n              <option>--Select Days--</option>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"7\">7</option>\r\n              <option value=\"14\">14</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n          <label>Date when the plant was last watered:\r\n            <input value = {plantDetails.today} onChange={enterPlantDetails} name=\"today\" type=\"date\"/>\r\n          </label>\r\n        </div>\r\n        <label>Select an Image\r\n          <div>\r\n            <input type=\"file\" onChange ={enterPlantDetails} name=\"plantImage\"/>\r\n          </div>\r\n        </label>\r\n        <button>Add The Plant</button>\r\n      </form>\r\n      <div className='plantContainer'>\r\n        {plantData.map((plant) => {\r\n          return (\r\n            <Plant\r\n              key = {plant.id}\r\n              num = {plant.id}\r\n              nickname={plant.nickname}\r\n              species={plant.species}\r\n              data={plantData}\r\n              days = {plant.days}\r\n              image = {plant.plantImage}\r\n              today = {plant.today}\r\n              triggerDelete = {deleteFunction}\r\n              addThirstyPlantFunction = {addThirstyPlantFunction}\r\n              listResetPlants = {listResetPlants}\r\n              updatePlantsFunction = {updatePlantsFunction}\r\n              adjustResetListFunction = {adjustResetListFunction}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Navigation.js",[],"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\PlantDetails.js",["77","78","79"],"import React, {useState, useEffect} from 'react';\r\nimport {useParams, useHistory} from 'react-router-dom';\r\nimport nature from \"../Assets/nature.jpg\";\r\n\r\n\r\nconst PlantDetails = (props) => {\r\n    const {plant} = useParams();\r\n    const {push} = useHistory();\r\n    const {plantData, updatePlantsFunction} = props;\r\n    const [individualPlant, setIndividualPlant] = useState({\r\n        nickname: \" \",\r\n        species: \" \",\r\n        plantImage: nature,\r\n        days: \"00\",\r\n        today: \"\",\r\n    });\r\n    console.log(plant, typeof(plant));\r\n\r\n    useEffect(() => {\r\n        plantData.map((p) => {\r\n            if(p.id === plant) {\r\n                setIndividualPlant(p);\r\n            }\r\n            return p\r\n        })\r\n    }, [plant, plantData])\r\n\r\n   \r\n    \r\n\r\n    const routeToDashboard = () => {\r\n        push(\"/dashboard\");\r\n    }\r\n\r\n    if(!individualPlant) {\r\n        return <div>Plants Details are Loading.....</div>\r\n    }\r\n\r\n    const updatePlantValues = (evt) => {\r\n        const {name, value} = evt.target;\r\n        console.log(name, value);\r\n        setIndividualPlant({...individualPlant, [name] : value});\r\n    }\r\n\r\n    const saveChangeFunction = (evt) => {\r\n        evt.preventDefault();\r\n        let plantIndex = 0;\r\n        plantData.map((p) => {\r\n            if(p.id === plant) {\r\n                plantIndex = plantData.indexOf(p);\r\n            }\r\n            console.log(plantIndex);\r\n            return plantData;\r\n        })\r\n        let copyArray = [...plantData];\r\n        copyArray[plantIndex] = (individualPlant);\r\n        console.log(copyArray);\r\n        updatePlantsFunction(copyArray);\r\n        push('/dashboard');\r\n    }\r\n\r\n    return (\r\n        <div className=\"plantDetailsContainer\">\r\n           <h1>Update / Change Plant Details</h1>\r\n           <form onSubmit={saveChangeFunction}>\r\n               <div> \r\n                   <img src={individualPlant.plantImage} alt=\"default\"/>\r\n               </div>\r\n               <label> Species :\r\n                    <input onChange = {updatePlantValues} type=\"text\" value = {individualPlant.species} name = \"species\"/>\r\n                </label> \r\n                <label> Nick Name :\r\n                    <input onChange = {updatePlantValues} type=\"text\" value = {individualPlant.nickname} name = \"nickname\"/>\r\n                </label>\r\n                <label>\r\n                Watering Schedule : \r\n                    <select onChange = {updatePlantValues} value = {individualPlant.days} name=\"days\">\r\n                        <option>--Select Days--</option>\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"7\">7</option>\r\n                        <option value=\"14\">14</option>\r\n                        <option value=\"5\">5</option>\r\n                    </select>\r\n                </label>\r\n                <button>Save Changes</button>\r\n           </form>\r\n           <button onClick={routeToDashboard}>Cancel</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlantDetails;","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\Plant.js",[],"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\context\\globalContext.js",["80"],"import React, {createContext, useContext,useState} from 'react'\r\n\r\nexport const GlobalContext = createContext()\r\nconst ContextProvider = ({children})=>{\r\n    \r\n    const[disabled, setDisabled] = useState(true);\r\n    const[activeUser,setActiveUser] = useState()\r\n \r\n    const[loggedIn,setLoggedIn] = useState(localStorage.getItem('token')? true:false)\r\n    const[plants,setPlants]=useState([])\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{disabled,setDisabled,loggedIn,setLoggedIn,plants,setPlants,activeUser,setActiveUser}}>\r\n\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextProvider","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\updateForm.js",["81","82"],"\r\nimport axios from \"axios\";\r\nimport React, {useState,useContext,useEffect} from \"react\";\r\nimport {useHistory,useParams} from 'react-router-dom'\r\n\r\n\r\n\r\nconst UpdateForm = ()=>{\r\n    let {push} = useHistory()\r\n    let {id}=useParams()\r\n\r\n    const startPlantDetails = {\r\n        nickname: \"\",\r\n        species: \"\",\r\n        // plantImage: nature,\r\n        frequency_d: 1,\r\n      \r\n      };\r\n  const [plantDetails, setPlantDetails] = useState(startPlantDetails);\r\n\r\n    useEffect(() => {\r\n      axios\r\n      .get(`https://waterplant-101.herokuapp.com/plants/${(id)}`,{headers:{authorization:localStorage.getItem('token')}})\r\n\r\n      .then(res=>{\r\n        setPlantDetails(res.data[0]);\r\n        console.log('editing form ',res.data)\r\n      })\r\n      .catch(err=>console.log(err))\r\n    }, [])\r\n    \r\n    \r\n    \r\n      const enterPlantDetails = (evt) => {\r\n        const {name, value} = evt.target;\r\n        console.log(name, value);\r\n        setPlantDetails({...plantDetails, [name] : value});\r\n      }\r\n\r\n      const saveChanges = (e)=>{\r\n          e.preventDefault();\r\n          axios\r\n          .put(`https://waterplant-101.herokuapp.com/plants/${id}`,plantDetails,{headers:{authorization:localStorage.getItem('token')}})\r\n          .then(res=>{console.log('saved changes Plant',res.data);push('/dashboard')})\r\n          .catch(err=>console.log(err))\r\n      }\r\n\r\n\r\n\r\n    return(\r\n\r\n\r\n        <div className=\"dashboardForm\">\r\n        <h2>Add Your Plants!</h2>\r\n        <form onSubmit={saveChanges} className='plantForm'>\r\n        <label>\r\n          nickname:\r\n          <input\r\n            onChange={enterPlantDetails}\r\n            type='text'\r\n            value={plantDetails.nickname}\r\n            name='nickname'\r\n            placeholder='Enter nickname'\r\n          />\r\n        </label>\r\n        <label>\r\n          species:\r\n          <input\r\n            onChange={enterPlantDetails}\r\n            type='text'\r\n            value={plantDetails.species}\r\n            name='species'\r\n            placeholder='Enter species'\r\n          />\r\n        </label>\r\n        <div className=\"wateringSchedule\">\r\n          <p>H2O Frequency Timer:</p>\r\n          <label>\r\n            Watering Frequency (Days)\r\n            <select onChange = {enterPlantDetails} value = {plantDetails.frequency_d} name=\"frequency_d\">\r\n              <option>--Select Days--</option>\r\n              <option value=\"1\">1</option>\r\n              <option value=\"2\">2</option>\r\n              <option value=\"7\">7</option>\r\n              <option value=\"14\">14</option>\r\n              <option value=\"5\">5</option>\r\n            </select>\r\n          </label>\r\n        </div>\r\n        {/* <label>Select an Image\r\n          <div>\r\n            <input type=\"file\" onChange ={enterPlantDetails} name=\"plantImage\"/>\r\n          </div>\r\n        </label> */}\r\n        <button>Save Plant</button>\r\n      </form>\r\n\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default UpdateForm","C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\Components\\plant-Form.js",[],"C:\\Users\\user\\Desktop\\lambda\\unit4\\bw-waterPlant\\Front-End\\water-plants\\src\\utils\\privateRoute.js",[],{"ruleId":"83","severity":1,"message":"84","line":1,"column":26,"nodeType":"85","messageId":"86","endLine":1,"endColumn":35},{"ruleId":"83","severity":1,"message":"87","line":16,"column":9,"nodeType":"85","messageId":"86","endLine":16,"endColumn":26},{"ruleId":"83","severity":1,"message":"88","line":29,"column":9,"nodeType":"85","messageId":"86","endLine":29,"endColumn":25},{"ruleId":"83","severity":1,"message":"89","line":37,"column":9,"nodeType":"85","messageId":"86","endLine":37,"endColumn":25},{"ruleId":"83","severity":1,"message":"90","line":47,"column":9,"nodeType":"85","messageId":"86","endLine":47,"endColumn":22},{"ruleId":"83","severity":1,"message":"91","line":53,"column":9,"nodeType":"85","messageId":"86","endLine":53,"endColumn":24},{"ruleId":"83","severity":1,"message":"92","line":83,"column":9,"nodeType":"85","messageId":"86","endLine":83,"endColumn":25},{"ruleId":"83","severity":1,"message":"93","line":88,"column":9,"nodeType":"85","messageId":"86","endLine":88,"endColumn":14},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"83","severity":1,"message":"98","line":27,"column":10,"nodeType":"85","messageId":"86","endLine":27,"endColumn":18},{"ruleId":"83","severity":1,"message":"99","line":45,"column":11,"nodeType":"85","messageId":"86","endLine":45,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":64,"column":8,"nodeType":"102","endLine":64,"endColumn":14,"suggestions":"103"},{"ruleId":"83","severity":1,"message":"104","line":17,"column":11,"nodeType":"85","messageId":"86","endLine":17,"endColumn":18},{"ruleId":"100","severity":1,"message":"105","line":29,"column":6,"nodeType":"102","endLine":29,"endColumn":8,"suggestions":"106"},{"ruleId":"83","severity":1,"message":"107","line":1,"column":16,"nodeType":"85","messageId":"86","endLine":1,"endColumn":24},{"ruleId":"83","severity":1,"message":"84","line":1,"column":37,"nodeType":"85","messageId":"86","endLine":1,"endColumn":46},{"ruleId":"83","severity":1,"message":"108","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":14},{"ruleId":"83","severity":1,"message":"109","line":1,"column":31,"nodeType":"85","messageId":"86","endLine":1,"endColumn":41},{"ruleId":"83","severity":1,"message":"109","line":3,"column":25,"nodeType":"85","messageId":"86","endLine":3,"endColumn":35},{"ruleId":"100","severity":1,"message":"110","line":30,"column":8,"nodeType":"102","endLine":30,"endColumn":10,"suggestions":"111"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'initialFormValues' is assigned a value but never used.","'addThirstyPlants' is assigned a value but never used.","'createPlantCards' is assigned a value but never used.","'triggerDelete' is assigned a value but never used.","'adjustResetList' is assigned a value but never used.","'updatePlantsData' is assigned a value but never used.","'admin' is assigned a value but never used.","no-native-reassign",["112"],"no-negated-in-lhs",["113"],"'disabled' is assigned a value but never used.","'setFormErrors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setDisabled'. Either include it or remove the dependency array.","ArrayExpression",["114"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'activeUser', 'plants', 'setActiveUser', and 'setPlants'. Either include them or remove the dependency array.",["115"],"'useState' is defined but never used.","'nature' is defined but never used.","'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["116"],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [form, setDisabled]",{"range":"123","text":"124"},"Update the dependencies array to be: [activeUser, plants, setActiveUser, setPlants]",{"range":"125","text":"126"},"Update the dependencies array to be: [id]",{"range":"127","text":"128"},[2075,2081],"[form, setDisabled]",[870,872],"[activeUser, plants, setActiveUser, setPlants]",[785,787],"[id]"]