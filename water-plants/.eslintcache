[{"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/index.js":"1","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/App.js":"2","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Home.js":"3","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Login.js":"4","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Signup.js":"5","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Navigation.js":"6","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Dashboard.js":"7","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Plant.js":"8","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/PlantDetails.js":"9"},{"size":257,"mtime":1611746971627,"results":"10","hashOfConfig":"11"},{"size":2815,"mtime":1612228747942,"results":"12","hashOfConfig":"11"},{"size":955,"mtime":1611876631714,"results":"13","hashOfConfig":"11"},{"size":406,"mtime":1611876762564,"results":"14","hashOfConfig":"11"},{"size":2993,"mtime":1612216237076,"results":"15","hashOfConfig":"11"},{"size":690,"mtime":1611876827120,"results":"16","hashOfConfig":"11"},{"size":3125,"mtime":1612228774570,"results":"17","hashOfConfig":"11"},{"size":3024,"mtime":1612229665805,"results":"18","hashOfConfig":"11"},{"size":2930,"mtime":1612199245532,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"xihac0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/index.js",[],["41","42"],"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/App.js",[],"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Home.js",[],"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Login.js",[],"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Signup.js",[],"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Navigation.js",[],"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Dashboard.js",[],"/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/Plant.js",["43"],"import React, {useEffect} from 'react';\nimport {Link, useRouteMatch, useParams} from 'react-router-dom';\n\n\nconst Plant = (props) => {\n    const {nickname, species, data, triggerDelete, image, days, today, num, addThirstyPlantFunction, listResetPlants} = props;\n\n    let {url} = useRouteMatch();\n    console.log(url);\n\n    let {plant} = useParams();\n    console.log(plant);\n\n    const setNextDate = (dayAdded, wateringschedule) => {\n        let newDate = new Date(dayAdded);\n        newDate.setDate(newDate.getDate() + parseInt(wateringschedule) + 1);\n\n        let dd = newDate.getDate();\n        //One is added because it is a zero-based value\n        let mm = newDate.getMonth() + 1;\n        let yy = newDate.getFullYear();\n\n        if (mm < 10) {\n            mm = \"0\" + mm;\n        }\n\n        if(dd < 10) {\n            dd = \"0\" + dd;\n        }\n\n        let formattedDate = yy + \"-\" + mm + \"-\" + dd;\n        return formattedDate;\n    }\n\n    const deleteFunction = (evt) => {\n    const nickNameText = evt.target.parentNode.parentNode.querySelector('h6').textContent;\n        \n        let datumIndex = 0;\n        data.filter((datum) => {\n            if(nickNameText.includes(datum.nickname)) {\n                datumIndex = data.indexOf(datum);\n                triggerDelete(datumIndex);\n            }\n            return data;\n        })\n    }\n\n    useEffect(() => {\n        let todaysDate = new Date();\n\n        let dd = todaysDate.getDate();\n        //One is added because it is a zero-based value\n        let mm = todaysDate.getMonth() + 1;\n        let yy = todaysDate.getFullYear();\n\n        if (mm < 10) {\n            mm = \"0\" + mm;\n        }\n        if(dd < 10) {\n            dd = \"0\" + dd;\n        }\n\n        let formattedTodaysDate = yy + \"-\" + mm + \"-\" + dd;\n\n        data.filter((datum) => {\n            let checkDate = setNextDate(datum.today, datum.days);\n            if(formattedTodaysDate === checkDate) {\n                if(!listResetPlants.includes(datum)) {\n                    addThirstyPlantFunction(datum);\n                }\n            }\n            console.log(listResetPlants);\n        })\n    }, [data, listResetPlants, addThirstyPlantFunction])\n\n    return (\n        <div className=\"plantContainer\">\n            <div className = \"card\">\n            <h5>{`Species: ${species}`}</h5>\n            <h6>{`Nickname: ${nickname}`}</h6>\n            <div className=\"plantImage\">\n                <img width=\"100%\" src={image} alt=\"nature\" />\n            </div>\n            <h6>{`Date The Plant was Watered/Added: ${today}`} </h6>\n            <h6>{`Watering Schedule: Every ${days} `}{parseInt(days) > 1  ? 'days' : 'day'}</h6>\n            <h6>{`Next Date for Watering is ${setNextDate(today, days)}`}</h6>\n            <button onClick= {deleteFunction}size=\"small\" color=\"primary\">\n                Delete\n            </button>\n            \n            <Link to = {`/plants/${num}`}>\n                <button>More Info</button>\n            </Link>\n            </div>   \n        </div>\n    )\n}\n\nexport default Plant;","/Users/jayaramnair/Desktop/Lambda School/repos/Front-End/water-plants/src/Components/PlantDetails.js",["44"],"import React, {useState, useEffect} from 'react';\nimport {useParams, useHistory} from 'react-router-dom';\nimport nature from \"../Assets/nature.jpg\";\n\n\nconst PlantDetails = (props) => {\n    const {plant} = useParams();\n    const {push} = useHistory();\n    const {plantData, updatePlantsFunction} = props;\n    const [individualPlant, setIndividualPlant] = useState({\n        nickname: \" \",\n        species: \" \",\n        plantImage: nature,\n        days: \"00\",\n        today: \"\",\n    });\n    console.log(plant, typeof(plant));\n\n    useEffect(() => {\n        plantData.map((p) => {\n            if(p.id === plant) {\n                setIndividualPlant(p);\n            }\n            return p\n        })\n    }, [plant, plantData])\n\n   \n    \n\n    const routeToDashboard = () => {\n        push(\"/dashboard\");\n    }\n\n    if(!individualPlant) {\n        return <div>Plants Details are Loading.....</div>\n    }\n\n    const updatePlantValues = (evt) => {\n        const {name, value} = evt.target;\n        console.log(name, value);\n        setIndividualPlant({...individualPlant, [name] : value});\n    }\n\n    const saveChangeFunction = (evt) => {\n        evt.preventDefault();\n        let plantIndex = 0;\n        plantData.map((p) => {\n            if(p.id === plant) {\n                plantIndex = plantData.indexOf(p);\n            }\n            console.log(plantIndex);\n        })\n        let copyArray = [...plantData];\n        copyArray[plantIndex] = (individualPlant);\n        console.log(copyArray);\n        updatePlantsFunction(copyArray);\n        push('/dashboard');\n    }\n\n    return (\n        <div className=\"plantDetailsContainer\">\n           <h1>Update / Change Plant Details</h1>\n           <form onSubmit={saveChangeFunction}>\n               <div> \n                   <img src={individualPlant.plantImage} alt=\"default\"/>\n               </div>\n               <label> Species :\n                    <input onChange = {updatePlantValues} type=\"text\" value = {individualPlant.species} name = \"species\"/>\n                </label> \n                <label> Nick Name :\n                    <input onChange = {updatePlantValues} type=\"text\" value = {individualPlant.nickname} name = \"nickname\"/>\n                </label>\n                <label>\n                Watering Schedule : \n                    <select onChange = {updatePlantValues} value = {individualPlant.days} name=\"days\">\n                        <option>--Select Days--</option>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"7\">7</option>\n                        <option value=\"14\">14</option>\n                        <option value=\"5\">5</option>\n                    </select>\n                </label>\n                <button>Save Changes</button>\n           </form>\n           <button onClick={routeToDashboard}>Cancel</button>\n        </div>\n    )\n}\n\nexport default PlantDetails;",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":65,"column":29,"nodeType":"51","messageId":"52","endLine":65,"endColumn":31},{"ruleId":"49","severity":1,"message":"53","line":48,"column":27,"nodeType":"51","messageId":"52","endLine":48,"endColumn":29},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a return value from arrow function.","no-global-assign","no-unsafe-negation"]